/*----------------------
   GATE version name: gate_v...

   Copyright (C): OpenGATE Collaboration

This software is distributed under the terms
of the GNU Lesser General  Public Licence (LGPL)
See LICENSE.md for further details
----------------------*/



#ifndef GATEMISCFUNCTIONS_ICC
#define GATEMISCFUNCTIONS_ICC


#include <typeinfo>


template<typename T>
bool ConvertFromString( const std::string & Str, T & Dest )
{
  // http://c.developpez.com/faq/cpp/?page=strings#STRINGS_convert_to
  // create a stream from string
  std::istringstream iss( Str );
  // attempt to convert into Dest
  return iss >> Dest != 0;
}

//------------------------------------------------------------------------------------------------------
template<typename T, int N>
typename std::vector<T> parse_N_values_of_type_T(std::string line,int lineno, const std::string& fname){
  std::istringstream iss(line);
  typename std::istream_iterator<T> iss_end;
  typename std::istream_iterator<T> isiT(iss);
  typename std::vector<T> vecT;
  while (isiT != iss_end) vecT.push_back(*(isiT++));
  int nread = vecT.size();
  if (nread != N){
    std::ostringstream errMsg;
    errMsg << "wrong number of values (" << nread << ") on line " << lineno << " of " << fname
           << ", expected " << N << " value(s) of type " << typeid(T).name() << std::endl;
    throw std::runtime_error(errMsg.str());
  }
  return vecT;
}

//------------------------------------------------------------------------------------------------------
template<typename T, int N>
typename std::vector<T>  ParseNextContentLine( std::istream& input, int& lineno, const std::string& fname ) {
  std::string line = ReadNextContentLine(input,lineno,fname);
  return parse_N_values_of_type_T<T,N>(line,lineno,fname);
}
//------------------------------------------------------------------------------------------------------

#endif // GATEMISCFUNCTIONS_ICC
